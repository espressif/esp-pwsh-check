[project]
    authors = [
        { name = "Espressif - Espressif"},
    ]
    classifiers = ["Programming Language :: Python :: 3"]
    description = "Espressif PowerShell script linter for pre-commit hook based on PSAnalyzer"
    dynamic = ["version"]
    license = { file = "LICENSE" }
    name = "esp-pwsh-check"
    readme = "README.md"
    requires-python = ">=3.8"

    dependencies = []


    [project.optional-dependencies]
        ci-quality = [
            "pylint-quotes~=0.2.3",
            "pylint==2.17.5",
        ]
        dev = [
            "commitizen~=3.10.1",
        ]

    [project.scripts]
        mooo = "esp_pwsh_check.__main__:main"

[tool.pylint]
    [tool.pylint.MASTER]
        ignore-paths = ["tests/.*"] # Paths to ignore during linting
    [tool.pylint.'BASIC']
        variable-rgx = "[a-z_][a-z0-9_]{1,30}$" # Variable names must start with a lowercase letter or underscore, followed by any combination of lowercase letters, numbers, or underscores, with a total length of 2 to 30 characters.
    [tool.pylint.'MESSAGES CONTROL']
        disable = [
            "duplicate-code",                # R0801: Similar lines in %s files
            "fixme",                         # W0511: Used when TODO/FIXME is encountered
            "import-error",                  # E0401: Used when pylint has been unable to import a module
            "import-outside-toplevel",       # E0402: Imports should usually be on top of the module
            "logging-fstring-interpolation", # W1202: Use % formatting in logging functions and pass the % parameters as arguments
            "missing-class-docstring",       # C0115: Missing class docstring
            "missing-function-docstring",    # C0116: Missing function or method docstring
            "missing-module-docstring",      # C0114: Missing module docstring
            "no-name-in-module",             # W0611: Used when a name cannot be found in a module
            "too-few-public-methods",        # R0903: Too few public methods of class
            "too-many-branches",             # R0912: Too many branches
            "too-many-locals",               # R0914: Too many local variables
            "too-many-return-statements",    # R0911: Too many return statements
            "too-many-statements",           # R0915: Too many statements
            "ungrouped-imports",             # C0412: Imports should be grouped by packages
        ]
    [tool.pylint.'FORMAT']
        max-line-length = 120 # Specifies the maximum line length for pylint checks

[tool.ruff]
    line-length    = 120                                                    # Specifies the maximum line length for ruff checks
    lint.select         = ['E', 'F', 'W']                                        # Types of issues ruff should check for
    target-version = "py311" # Specifies the target Python version for ruff checks

    [tool.ruff.format] # See formatter config options at https://docs.astral.sh/ruff/formatter
        quote-style = "single"

[tool.mypy]
    disallow_incomplete_defs = false                               # Disallows defining functions with incomplete type annotations
    disallow_untyped_defs    = true                                # Disallows defining functions without type annotations or with incomplete type annotations
    exclude                  = '^venv/'                            # Paths to ignore during type checking
    ignore_missing_imports   = true                                # Suppress error messages about imports that cannot be resolved
    python_version           = "3.11"                              # Specifies the Python version used to parse and check the target program
    warn_no_return           = true                                # Shows errors for missing return statements on some execution paths
    warn_return_any          = true                                # Shows a warning when returning a value with type Any from a function declared with a non- Any return type

[tool.commitizen]
    version                    = "1.0.0"
    update_changelog_on_bump   = true
    tag_format                 = "v$version"
    annotated_tag              = true
    changelog_merge_prerelease = true
    bump_message               = "change: Updated release version to v$new_version"
    version_files              = [
        "esp_pwsh_check/__init__.py:__version__"
    ]

    change_type_order = [
        "BREAKING CHANGE",
        "New Features",
        "Bug Fixes",
        "Code Refactoring",
        "Performance Improvements",
        "Documentation updates"
    ]

[tool.commitizen.change_type_map]
feat     = "New Features"
fix      = "Bug Fixes"
refactor = "Code Refactoring"
perf     = "Performance Improvements"
docs     = "Documentation updates"
